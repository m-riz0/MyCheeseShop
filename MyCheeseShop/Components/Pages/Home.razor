@using MyCheeseShop.Components.Shared
@using MyCheeseShop.Context
@using MyCheeseShop.Model
@page "/"
@inject CheeseProvider CheeseProvider
@inject ShoppingCart ShoppingCart
@inject NavigationManager NavigationManager

<body style="background-color:#faf5b6">
<PageTitle>MyCheeseShop - Buy Top Quality Cheese</PageTitle>

@if (cheeses is null)
{
    <p>Loading...</p>
}
else if (!cheeses.Any())
{
    <p>No cheeses found</p>
}

    <div class="container bg-#8c8b76">
    <div class="d-flex justify-content-between flex-column flex-md-row mb-1">
        <div class="d-flex">
            <div class="dropdown me-1">
                <a class="btn btn-outline-dark dropdown-toggle" href="#" role="button" data-bs-toggle="dropdown" aria-expanded="false">
                    Sort by @sortCriteria.ToString()
                </a>
                <ul class="dropdown-menu">
                    <li><a class="dropdown-item" href="#" @onclick="() => Sort(SortCriteria.Name)">Name</a></li>
                    <li><a class="dropdown-item" href="#" @onclick="() => Sort(SortCriteria.Price)">Price</a></li>
                    <li><a class="dropdown-item" href="#" @onclick="() => Sort(SortCriteria.Type)">Type</a></li>
                    <li><a class="dropdown-item" href="#" @onclick="() => Sort(SortCriteria.Strength)">Strength</a></li>
                </ul>
            </div>
            <input type="text" class="form-control" placeholder="Search for cheese..." @bind="searchTerm" @bind:event="oninput">
        </div>
        <div class="d-flex justify-content-end mt-2 mt-md-0">
            <a @onclick="GoToCart" class="btn btn-outline-warning">Cart (@ShoppingCart.Count())</a>
        </div>
    </div>
    <p></p>
    <div class="row row-cols-1 row-cols-md-4 g-4">

        @foreach (var cheese in FilteredCheeses)
        {
            <div class="col">
                <StoreItem Cheese="cheese" />
            </div>
        }
        @if (!FilteredCheeses.Any())
        {
            <p>No cheeses found</p>
        }
    </div>
</div>
</body>

@code {
    private IEnumerable<Cheese> cheeses;
    private string searchTerm = "";
    private SortCriteria sortCriteria = SortCriteria.Name;

    private IEnumerable<Cheese> filteredCheeses;
    private IEnumerable<Cheese> FilteredCheeses
    {
        get
        {
            return filteredCheeses.Where(GetSearchCriteria);
        }
        set
        {
            filteredCheeses = value;
        }
    }

    protected override async Task OnInitializedAsync()
    {
        cheeses = await CheeseProvider.GetAllCheesesAsync();
        filteredCheeses = cheeses;
        ShoppingCart.OnCartUpdated += StateHasChanged;
    }


    private bool GetSearchCriteria(Cheese cheese)
    {
        if (string.IsNullOrWhiteSpace(searchTerm)) return true;

        return cheese.Name.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)
        || cheese.Type.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)
        || cheese.Description.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)
        || cheese.Strength.Contains(searchTerm, StringComparison.OrdinalIgnoreCase);
    }

    private void GoToCart()
    {
        NavigationManager.NavigateTo("/cart");
    }

    private void Sort(SortCriteria criteria)
    {
        sortCriteria = criteria;
        filteredCheeses = criteria switch
        {
            SortCriteria.Name => FilteredCheeses = filteredCheeses.OrderBy(c => c.Name),
            SortCriteria.Price => FilteredCheeses = filteredCheeses.OrderBy(c => c.Price),
            SortCriteria.Type => FilteredCheeses = filteredCheeses.OrderBy(c => c.Type),
            SortCriteria.Strength => FilteredCheeses = filteredCheeses.OrderBy(c => c.Strength),
            _ => filteredCheeses
        };
    }

    private enum SortCriteria
    {
        Name,
        Price,
        Type,
        Strength
    }
}

