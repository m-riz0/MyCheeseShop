@page "/Account/Register"

@using System.ComponentModel.DataAnnotations
@using System.Text
@using System.Text.Encodings.Web
@using MyCheeseShop.Components.Account.Shared
@using MyCheeseShop.Model
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities

@inject UserManager<User> UserManager
@inject IUserStore<User> UserStore
@inject SignInManager<User> SignInManager
@inject ILogger<Register> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager

<body style="background-color:#faf5b6">
<PageTitle>MyCheeseShop - Register</PageTitle>
<StatusMessage Message="@statusMessage" IsError="@isError" />

<EditForm OnValidSubmit="RegisterUser" Model="Model" FormName="registerForm">
    <DataAnnotationsValidator />

        <div class="row justify-content-center mb-1 mt-5">
            <div class="col-md-6">
                <div class="card h-100" style="border: 2px solid #e3e1b8">
                    <div class="card-body" style="background-color:#e3e1b8">
                        <h5 class="card-title text-center">About you</h5>
                        <div class="mb-3">
                            <label for="firstname">First Name</label>
                            <InputText id="firstname" class="form-control" placeholder="First Name" @bind-Value="Model.FirstName" />
                            <div class="small">
                                <ValidationMessage For="@(() => Model!.FirstName)" />
                            </div>
                        </div>
                        <div class="mb-3">
                            <label for="lastname">Last Name</label>
                            <InputText id="lastname" class="form-control" placeholder="Last Name" @bind-Value="Model.LastName" />
                            <div class="small">
                                <ValidationMessage For="@(() => Model!.LastName)" />
                            </div>
                        </div>
                        <div class="mb-3">
                            <label for="street">Street</label>
                            <InputText id="street" class="form-control" placeholder="Street" @bind-Value="Model.Address" />
                            <div class="small">
                                <ValidationMessage For="@(() => Model!.Address)" />
                            </div>
                        </div>
                        <div class="mb-3">
                            <label for="city">City</label>
                            <InputText id="city" class="form-control" placeholder="City" @bind-Value="Model.City" />
                            <div class="small">
                                <ValidationMessage For="@(() => Model!.City)" />
                            </div>
                        </div>
                        <div class="mb-3">
                            <label for="postcode">Post Code</label>
                            <InputText id="postcode" class="form-control" placeholder="Post Code" @bind-Value="Model.PostCode" />
                            <div class="small">
                                <ValidationMessage For="@(() => Model!.PostCode)" />
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
            <p></p>
        <div class="row justify-content-center mb-2">
            <div class="col-md-6">
                <div class="card h-100" style="border: 2px solid #e3e1b8;">
                    <div class="card-body" style="background-color:#e3e1b8">
                        <h5 class="card-title text-center">Login details</h5>
                        <div class="mb-3">
                            <label for="email">Email</label>
                            <InputText id="email" class="form-control" placeholder="you@example.com" @bind-Value="Model.Email" />
                            <div class="small">
                                <ValidationMessage For="@(() => Model!.Email)" />
                            </div>
                        </div>
                        <div class="mb-3">
                            <label for="password">Password</label>
                            <InputText id="password" type="password" class="form-control" placeholder="Password" @bind-Value="Model.Password" />
                            <div class="small">
                                <ValidationMessage For="@(() => Model!.Password)" />
                            </div>
                        </div>
                        <div class="mb-3">
                            <label for="confirm">Confirm Password</label>
                            <InputText id="confirm" type="password" class="form-control" placeholder="Confirm Password" @bind-Value="Model.ConfirmPassword" />
                            <div class="small">
                                <ValidationMessage For="@(() => Model!.ConfirmPassword)" />
                            </div>
                        </div>
                        <div class="d-grid gap-2 mb-3">
                            <button type="submit" class="btn bg-warning w-100">Register</button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </EditForm>
</body>

@code {
    private IEnumerable<IdentityError>? identityErrors;

    [SupplyParameterFromForm]
    private RegisterModel Model { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    private string? statusMessage => identityErrors is null ? null : string.Join(" ", identityErrors.Select(error => error.Description));
    private bool isError;

    public async Task RegisterUser(EditContext editContext)
    {
        var user = new User
            {
                UserName = Model.Email,
                Email = Model.Email,
                FirstName = Model.FirstName,
                LastName = Model.LastName,
                Address = Model.Address,
                City = Model.City,
                PostCode = Model.PostCode
            };

            var result = await UserManager.CreateAsync(user, Model.Password);
            await UserManager.AddToRoleAsync(user, "Customer");

        if (!result.Succeeded)
        {
            identityErrors = result.Errors;
            isError = true;
            return;
        }

        Logger.LogInformation("User created a new account with password.");

        var userId = await UserManager.GetUserIdAsync(user);

        await SignInManager.SignInAsync(user, isPersistent: false);
        RedirectManager.RedirectTo(ReturnUrl);
    }

    private sealed class RegisterModel
    {
        [Required(ErrorMessage = "Please enter your email.")]
        [EmailAddress(ErrorMessage = "Please enter a valid email address.")]
        public string Email { get; set; } = "";

        [Required(ErrorMessage = "Please enter a password.")]
        [DataType(DataType.Password)]
        public string Password { get; set; } = "";

        [Required(ErrorMessage = "Please confirm your password.")]
        [DataType(DataType.Password)]
        [Compare("Password", ErrorMessage = "The password and confirmation password do not match.")]
        public string ConfirmPassword { get; set; } = "";

        [Required(ErrorMessage = "Please enter your first name.")]
        public string FirstName { get; set; } = "";

        [Required(ErrorMessage = "Please enter your last name.")]
        public string LastName { get; set; } = "";

        [Required(ErrorMessage = "Please enter your address.")]
        public string Address { get; set; } = "";

        [Required(ErrorMessage = "Please enter your city.")]
        public string City { get; set; } = "";

        [Required(ErrorMessage = "Please enter your post code.")]
        public string PostCode { get; set; } = "";
    }
}

